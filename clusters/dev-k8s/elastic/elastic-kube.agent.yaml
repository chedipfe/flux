# Déploie un Elastic Agent sur chaque nœud DaemonSet
# Permet à cet agent de collecter :
# les logs des conteneurs
# les métriques du système et des pods
# les logs Kubernetes S’intègre à Kibana et Fleet pour gestion centralisée ,Accède en lecture à tout ce qui est utile dans le cluster

apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: elastic-agent
  namespace: kube-system
spec:
  version: 8.17.5
  image: docker.elastic.co/elastic/elastic-agent:8.17.5
  kibanaRef:
    name: kibana
    namespace: elastic-system
  fleetServerRef:
    name: fleet-server
    namespace: elastic-system
  mode: fleet
  policyID: rke2-policy
  daemonSet:
    podTemplate:
      spec:
        hostAliases:
        - ip: "172.17.47.192"
          hostnames:
          - "dev-tool-ps-k8s-m-1"
        - ip: "172.17.47.193"
          hostnames:
          - "dev-tool-ps-k8s-m-2"
        - ip: "172.17.47.194"
          hostnames:
          - "dev-tool-ps-k8s-m-3"
        - ip: "172.17.47.195"
          hostnames:
          - "dev-tool-ps-k8s-w-1"
        - ip: "172.17.47.196"
          hostnames:
          - "dev-tool-ps-k8s-w-2"
        - ip: "172.17.47.197"
          hostnames:
          - "dev-tool-ps-k8s-w-3"
        serviceAccountName: elastic-kube-agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
          privileged: true
        containers:
        - name: agent
          env:
            - name: KUBERNETES_INTEGRATION_ENABLED
              value: "true"
            - name: KUBERNETES_METRICS_ENABLED
              value: "true"
            - name: KUBERNETES_LOGS_ENABLED
              value: "true"
            - name: KUBELET_HOST
              value: "https://kubernetes.default.svc"
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 700Mi
          volumeMounts:
            - name: proc
              mountPath: /hostfs/proc
              readOnly: true
            - name: cgroup
              mountPath: /hostfs/sys/fs/cgroup
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - name: varlog
              mountPath: /var/log
              readOnly: true
            - name: etc-kubernetes
              mountPath: /etc/kubernetes
              readOnly: true
            - name: var-lib-kubelet
              mountPath: /var/lib/kubelet
              readOnly: true
            - name: elastic-agent-state
              mountPath: /usr/share/elastic-agent/state
            - name: varlogcontainers
              mountPath: /var/log/containers
              readOnly: true
        volumes:
          - name: proc
            hostPath:
              path: /proc
          - name: cgroup
            hostPath:
              path: /sys/fs/cgroup
          - name: varlibdockercontainers
            hostPath:
              path: /var/lib/docker/containers

          - name: varlog
            hostPath:
              path: /var/log
          - name: etc-kubernetes
            hostPath:
              path: /etc/kubernetes
          - name: var-lib-kubelet
            hostPath:
              path: /var/lib/kubelet
          - name: elastic-agent-state
            hostPath:
              path: /var/lib/elastic-agent/state
              type: DirectoryOrCreate
          - name: varlogcontainers
            hostPath:
              path: /var/log/containers
              type: DirectoryOrCreate
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-kube-agent
  labels:
    k8s-app: elastic-kube-agent
rules:
- apiGroups: [""]
  resources:
    - pods
    - nodes
    - namespaces
    - events
    - services
    - configmaps
    - secrets
    - persistentvolumes
    - persistentvolumeclaims
    - endpoints
  verbs:
    - get
    - list
    - watch
- apiGroups: ["coordination.k8s.io"]
  resources:
    - leases
  verbs:
    - get
    - create
    - update
- apiGroups: ["apps"]
  resources:
    - replicasets
    - deployments
    - statefulsets
    - daemonsets
  verbs:
    - get
    - list
    - watch
- apiGroups: ["batch"]
  resources:
    - jobs
    - cronjobs
  verbs:
    - get
    - list
    - watch
- apiGroups: ["extensions"]
  resources:
    - replicasets
    - deployments
    - daemonsets
  verbs:
    - get
    - list
    - watch
- apiGroups: ["metrics.k8s.io"]
  resources:
    - pods
    - nodes
  verbs:
    - get
    - list
    - watch
- nonResourceURLs:
  - /metrics
  - /healthz
  - /livez
  - /readyz
  - /version
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-kube-agent
subjects:
- kind: ServiceAccount
  name: elastic-kube-agent
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: elastic-kube-agent
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: elastic-kube-agent
  namespace: kube-system
  labels:
    k8s-app: elastic-kube-agent
rules:
- apiGroups:
    - coordination.k8s.io
  resources:
    - leases
  verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elastic-kube-agent
  namespace: kube-system
subjects:
- kind: ServiceAccount
  name: elastic-kube-agent
  namespace: kube-system
roleRef:
  kind: Role
  name: elastic-kube-agent
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-kube-agent
  namespace: kube-system
  labels:
    k8s-app: elastic-kube-agent